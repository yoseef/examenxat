var app=angular.module("app",["ngResource","ngRoute"]);angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(e,r,o){var t={username:"",password:""};e.user=Object.create(t),e.login=function(){e.user&&""!=e.user.username&&""!=e.user.password&&(console.log(e.user),r.login(e.user.username,e.user.password,function(r,o){401==o&&(e.error=r.missatge)}).success(function(){r.getUser().then(function(r){e.$emit("login",r.data),o.path("/")})}))}}]),angular.module("app").controller("RegistrarCtrl",["$scope","UserSvc","$location",function(e,r,o){var t={username:"",password:"",password2:""};e.dadesRegistre=Object.create(t),e.sonIguals=function(){return e.dadesRegistre.password===e.dadesRegistre.password2?!0:(e.Register.$valid=!1,console.log(e.Register.$valid),!1)},e.registrar=function(){e.dadesRegistre.password&&e.dadesRegistre.password2&&e.dadesRegistre.username?e.dadesRegistre.password===e.dadesRegistre.password2?(console.log(e.dadesRegistre),r.registre(e.dadesRegistre.username,e.dadesRegistre.password).success(function(){o.path("/login")}).error(function(r,o){409==o&&(e.error=r.missatge),e.dadesRegistre.username=""})):e.error="Les contrasenyes no s√≥n iguals":e.error="Has d'emplenar tots els camps"}}]),angular.module("app").controller("afegirllibre",["$scope","LlibresFactory","$location","AutorsFactory",function(e,r,o,t){var l={titol:"",isbn:"",autors:[],date:new Date};e.llibre=Object.create(l),e.addLlibre=function(){e.llibre&&""!=e.llibre.titol&&""!=e.llibre.isbn&&(e.llibre.autors=e.selected,console.log(e.llibre),r.save(e.llibre,function(){console.log("s'ha guardat"),o.path("/")},function(e){console.log("Error"+e)}))},e.netejarCamps=function(){e.llibre=null},t.query(function(r){e.Autors=r})}]),angular.module("app").controller("editarllibre",["$scope","LlibresFactory","$rootScope","$location",function(e,r,o,t){o.llibreToEdit&&(e.llibre=o.llibreToEdit),e.updateLlibre=function(){e.llibre&&""!=e.llibre.titol&&""!=e.llibre.isbn&&r.update(e.llibre,function(){console.log("updated"),t.path("/")})},e.netejarCamps=function(){e.llibre&&(e.llibre=null,o.llibreToEdit=null)}}]),angular.module("app").controller("LlibreCtrl",["$scope","$location","UserSvc",function(e,r,o){e.$on("login",function(r,o){e.currentUser=o}),e.logout=function(){o.logOut(),delete e.currentUser,r.path("/")}}]),angular.module("app").factory("LlibresFactory",["$resource",function(e){return e("/api/llibres/:id",null,{update:{method:"PUT"}})}]),angular.module("app").controller("llistallibre",["$scope","LlibresFactory","$rootScope","$location",function(e,r,o,t){e.llibres=[],e.loading=!0,e.llibres=r.query(function(r){e.llibres=r,e.loading=!1}),e.removeLlibre=function(o){console.log(e.currentUser),e.currentUser?o&&r["delete"]({id:e.llibres[o].isbn},function(){e.llibres.splice(o,1)}):t.path("/login")},e.editarLlibre=function(r){o.llibreToEdit=e.llibres[r],t.path("/editarllibre")}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(e){e.when("/",{controller:"llistallibre",templateUrl:"llista.html",autoritzat:!1}).when("/noullibre",{controller:"afegirllibre",templateUrl:"afegir.html",autoritzat:!0}).when("/editarllibre",{controller:"editarllibre",templateUrl:"edicio.html",autoritzat:!0}).when("/registrar",{controller:"RegistrarCtrl",templateUrl:"registrar.html",autoritzat:!1}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html",autoritzat:!1}).when("/autors",{controller:"llistaAutors",templateUrl:"autor/llista.html",autoritzat:!1}).when("/NouAutor",{controller:"afegirAutor",templateUrl:"autor/afegir.html",autoritzat:!1}).otherwise({redirectTo:"/"})}]).run(["$rootScope","UserSvc","$location",function(e,r,o){e.$on("$routeChangeStart",function(e,t){t&&!r.auth&t.autoritzat&&o.path("/login")})}]),angular.module("app").service("UserSvc",["$http",function(e){var r=this;r.auth=!1,r.getUser=function(){return e.get("/api/users")},r.login=function(o,t,l){return e.post("/api/sessions",{username:o,password:t}).success(function(o){e.defaults.headers.common["x-auth"]=o,o&&(r.auth=!0)}).error(function(e,r){l(e,r)})},this.registre=function(r,o){return e.post("/api/users",{username:r,password:o})},this.logOut=function(){r.auth=!1,e.defaults.headers.common["x-auth"]=""}}]),angular.module("app").controller("afegirAutor",["$scope","AutorsFactory","$location",function(e,r,o){var t=new Date,l={nom:"",cognom:"",cognom2:[],any:t.getFullYear()};e.autor=Object.create(l),e.addAutor=function(){e.autor&&""!=e.autor.nom&&""!=e.autor.cognom&&r.save(e.autor,function(){console.log("s'ha guardat"),o.path("/autors")},function(e){console.log("Error"+e)})},e.netejarCamps=function(){e.autor=null}}]),angular.module("app").controller("llistaAutors",["$scope","AutorsFactory","$rootScope","$location",function(e,r){e.Autors=[],e.loading=!0,e.Autors=r.query(function(r){e.Autors=r,e.loading=!1})}]),angular.module("app").factory("AutorsFactory",["$resource",function(e){return e("/api/autors/:id",null,{update:{method:"PUT"}})}]);
//# sourceMappingURL=data:application/json;base64,