var app=angular.module("app",["ngResource","ngRoute"]);angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(e,r,t){var o={username:"",password:""};e.user=Object.create(o),e.login=function(){e.user&&""!=e.user.username&&""!=e.user.password&&(console.log(e.user),r.login(e.user.username,e.user.password,function(r,t){401==t&&(e.error=r.missatge)}).success(function(){r.getUser().then(function(r){e.$emit("login",r.data),t.path("/")})}))}}]),angular.module("app").controller("RegistrarCtrl",["$scope","UserSvc","$location",function(e,r,t){var o={username:"",password:"",password2:""};e.dadesRegistre=Object.create(o),e.sonIguals=function(){return e.dadesRegistre.password===e.dadesRegistre.password2?!0:(e.Register.$valid=!1,console.log(e.Register.$valid),!1)},e.registrar=function(){e.dadesRegistre.password&&e.dadesRegistre.password2&&e.dadesRegistre.username?e.dadesRegistre.password===e.dadesRegistre.password2?(console.log(e.dadesRegistre),r.registre(e.dadesRegistre.username,e.dadesRegistre.password).success(function(){t.path("/login")}).error(function(r,t){409==t&&(e.error=r.missatge),e.dadesRegistre.username=""})):e.error="Les contrasenyes no s√≥n iguals":e.error="Has d'emplenar tots els camps"}}]),angular.module("app").controller("afegirllibre",["$scope","LlibresFactory","$location",function(e,r,t){var o={titol:"",isbn:"",autors:[],date:new Date};e.llibre=Object.create(o),e.addLlibre=function(){e.llibre&&""!=e.llibre.titol&&""!=e.llibre.isbn&&r.save(e.llibre,function(){console.log("s'ha guardat"),t.path("/")},function(e){console.log("Error"+e)})},e.netejarCamps=function(){e.llibre=null}}]),angular.module("app").controller("editarllibre",["$scope","LlibresFactory","$rootScope","$location",function(e,r,t,o){t.llibreToEdit&&(e.llibre=t.llibreToEdit),e.updateLlibre=function(){e.llibre&&""!=e.llibre.titol&&""!=e.llibre.isbn&&r.update(e.llibre,function(){console.log("updated"),o.path("/")})},e.netejarCamps=function(){e.llibre&&(e.llibre=null,t.llibreToEdit=null)}}]),angular.module("app").controller("LlibreCtrl",["$scope","$location","UserSvc",function(e,r,t){e.$on("login",function(r,t){e.currentUser=t}),e.logout=function(){t.logOut(),delete e.currentUser,r.path("/")}}]),angular.module("app").factory("LlibresFactory",["$resource",function(e){return e("/api/llibres/:id",null,{update:{method:"PUT"}})}]),angular.module("app").controller("llistallibre",["$scope","LlibresFactory","$rootScope","$location",function(e,r,t,o){e.llibres=[],e.loading=!0,e.llibres=r.query(function(r){e.llibres=r,e.loading=!1}),e.removeLlibre=function(t){t&&r["delete"]({id:e.llibres[t].isbn},function(){e.llibres.splice(t,1)})},e.editarLlibre=function(r){t.llibreToEdit=e.llibres[r],o.path("/editarllibre")}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(e){e.when("/",{controller:"llistallibre",templateUrl:"llista.html",autoritzat:!1}).when("/noullibre",{controller:"afegirllibre",templateUrl:"afegir.html",autoritzat:!0}).when("/editarllibre",{controller:"editarllibre",templateUrl:"edicio.html",autoritzat:!0}).when("/registrar",{controller:"RegistrarCtrl",templateUrl:"registrar.html",autoritzat:!1}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html",autoritzat:!1}).otherwise({redirectTo:"/"})}]).run(["$rootScope","UserSvc","$location",function(e,r,t){e.$on("$routeChangeStart",function(e,o){o&&!r.auth&o.autoritzat&&t.path("/login")})}]),angular.module("app").service("UserSvc",["$http",function(e){var r=this;r.auth=!1,r.getUser=function(){return e.get("/api/users")},r.login=function(t,o,l){return e.post("/api/sessions",{username:t,password:o}).success(function(t){e.defaults.headers.common["x-auth"]=t,t&&(r.auth=!0)}).error(function(e,r){l(e,r)})},this.registre=function(r,t){return e.post("/api/users",{username:r,password:t})},this.logOut=function(){r.auth=!1,e.defaults.headers.common["x-auth"]=""}}]);
//# sourceMappingURL=data:application/json;base64,