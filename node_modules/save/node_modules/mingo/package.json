{
  "name": "mingo",
  "version": "0.3.2",
  "description": "JavaScript implementation of MongoDB query language",
  "main": "mingo.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "tape test/*.js",
    "build": "uglifyjs mingo.js -c -m -o mingo.min.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kofrasa/mingo.git"
  },
  "files": [
    "mingo.js",
    "mingo.min.js",
    "README.md",
    "LICENSE"
  ],
  "dependencies": {
    "underscore": ">=1.5.2"
  },
  "devDependencies": {
    "underscore": ">=1.5.2",
    "backbone": ">=1.1.2",
    "tape": ">=2.14.0",
    "JSON": ">=1.0.0",
    "uglify-js": "2.4.x"
  },
  "keywords": [
    "util",
    "mongo",
    "mongodb",
    "nosql",
    "query",
    "browser",
    "functional",
    "aggregation",
    "filtering",
    "grouping",
    "searching"
  ],
  "author": {
    "name": "Francis Asante",
    "email": "kofrasa@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kofrasa/mingo/issues"
  },
  "readme": "# Mingo\nJavaScript implementation of MongoDB query language\n\nMingo harnesses the power of MongoDB-style queries and allows direct querying of in-memory \njavascript objects in both client and server-side environments.\n\n[![build status](https://secure.travis-ci.org/kofrasa/mingo.png)](http://travis-ci.org/kofrasa/mingo)\n\n## Dependencies\n[underscore](https://github.com/jashkenas/underscore)\n\n## Installing\n```$ npm install mingo```\n\nIn browser\n```html\n<!-- DO NOT FORGET Underscore -->\n<script type=\"text/javascript\" src=\"./underscore-min.js\"></script>\n<script type=\"text/javascript\" src=\"./mingo.min.js\"></script>\n```\n\n## Features\n- Supports Dot Notation for both '_&lt;array&gt;.&lt;index&gt;_' and '_&lt;document&gt;.&lt;field&gt;_' selectors\n- Comparisons Operators ($gt, $gte, $lt, $lte, $ne, $nin, $in)\n- Logical Operators ($and, $or, $nor, $not)\n- Evaluation Operators ($regex, $mod, $where)\n- Array Operators ($all, $elemMatch, $size)\n- Element Operators ($exists, $type)\n- Aggregation Pipeline Operators ($group, $match, $project, $sort, $limit, $unwind, $skip)\n- Conditional Operators ($cond, $ifNull)\n- Group Operators ($addToSet, $sum, $max, $min, $avg, $push, $first, $last)\n- Arithmetic Operators ($add, $divide, $mod, $multiply, $subtract)\n- String Operators ($cmp, $strcasecmp, $concat, $substr, $toLower, $toUpper)\n- Set Operators ($setEquals, $setIntersection, $setDifference, $setUnion, $setIsSubset, $anyElementTrue, $allElementsTrue)\n- Projection Operators ($elemMatch, $slice)\n- JSON stream filtering and projection. *_NodeJS only_*\n\n## Usage\n```javascript\n\nvar Mingo = require('mingo');\n// or just access *Mingo* global in browser\n\n// setup the key field for your collection\nMingo.setup({\n    key: '_id' // default\n});\n\n// create a query with criteria\n// find all grades for homework with score >= 50\nvar query = new Mingo.Query({\n    type: \"homework\",\n    score: { $gte: 50 }\n});\n```\n\n## Searching and Filtering\n```javascript\n// filter collection with find()\nvar cursor = query.find(collection);\n\n// shorthand with query criteria\n// cursor = Mingo.find(collection, criteria);\n\n// sort, skip and limit by chaining\ncursor.sort({student_id: 1, score: -1})\n    .skip(100)\n    .limit(100);\n\n// count matches\ncursor.count();\n\n// iterate cursor\n// iteration is forward only\nwhile (cursor.hasNext()) {\n    console.log(cursor.next());\n}\n\n// use first(), last() and all() to retrieve matched objects\ncursor.first();\ncursor.last();\ncursor.all();\n\n// Filter non-matched objects (\nvar result = query.remove(collection);\n```\n\n## Aggregation Pipeline\n```javascript\nvar agg = new Mingo.Aggregator([\n    {'$match': { \"type\": \"homework\"}},\n    {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\n    {'$sort':{'_id': 1, 'score': 1}}\n]);\n\nvar result = agg.run(collection);\n\n// shorthand\nresult = Mingo.aggregate(\n    collection,\n    [\n        {'$match': { \"type\": \"homework\"}},\n        {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\n        {'$sort':{'_id': 1, 'score': 1}}\n    ]\n);\n```\n\n## Stream Filtering\n```js\nvar JSONStream = require('JSONStream'),\n    fs = require('fs'),\n    Mingo = require('mingo');\n\nvar query = new Mingo.Query({\n  scores: { $elemMatch: {type: \"exam\", score: {$gt: 90}} }\n}, {name: 1});\n\n// ex. [\n//      { \"_id\" : 11, \"name\" : \"Marcus Blohm\", \"scores\" : [\n//          { \"type\" : \"exam\", \"score\" : 78.42617835651868 },\n//          { \"type\" : \"quiz\", \"score\" : 82.58372817930675 },\n//          { \"type\" : \"homework\", \"score\" : 87.49924733328717 },\n//          { \"type\" : \"homework\", \"score\" : 15.81264595052612 } ]\n//      },\n//      ...\n//     ]\nfile = fs.createReadStream('./students.json');\n\nvar qs = query.stream();\nqs.on('data', function (data) {\n    console.log(data); // log filtered outputs\n    // ex. { name: 'Dinah Sauve', _id: 49 }\n});\n\nfile.pipe(JSONStream.parse(\"*\")).pipe(qs);\n\n```\n\n## Backbone Integration\n```javascript\n// using with Backbone\nvar Grades = Backbone.Collection.extend(Mingo.CollectionMixin);\n\nvar grades = new Grades(collection);\n\n// find students with grades less than 50 in homework or quiz\n// sort by score ascending and type descending\ncursor = grades.query({\n    $or: [{type: \"quiz\", score: {$lt: 50}}, {type: \"homework\", score: {$lt: 50}}]\n}).sort({score: 1, type: -1}).limit(10);\n\n// print grade with the lowest score\ncursor.first();\n```\n\nFor documentation on using query operators see [mongodb](http://docs.mongodb.org/manual/reference/operator/query/)\n\n## API\n### Mingo.Query(criteria, [projection])\nCreates a ```Mingo.Query``` object with the given query criteria\n- ```test(obj)``` Returns true if the object passes the query criteria, otherwise false.\n- ```find(collection, [projection])``` Performs a query on a collection and returns a ```Mingo.Cursor``` object.\n- ```remove(collection)``` Remove matching documents from the collection and return the remainder\n- ```stream()``` Return a ```Mingo.Stream``` to filter and transform JSON objects from a readable stream. *_NodeJS only_*\n\n### Mingo.Aggregator(expressions)\nCreates a ```Mingo.Aggregator``` object with a collection of aggregation pipeline expressions\n- ```run()``` Apply the pipeline operations over the collection by order of the sequence added\n\n### Mingo.Cursor(collection, query, [projection])\nCreates a ```Mingo.Cursor``` object which holds the result of applying the query over the collection\n- ```all()``` Returns all the matched documents in a cursor as a collection.\n- ```first()``` Returns the first documents in a cursor.\n- ```last()``` Returns the last document in a cursor\n- ```count()``` Returns a count of the documents in a cursor.\n- ```limit(n)``` Constrains the size of a cursor's result set.\n- ```skip(n)``` Returns a cursor that begins returning results only after passing or skipping a number of documents.\n- ```sort(modifier)``` Returns results ordered according to a sort specification.\n- ```next()``` Returns the next document in a cursor.\n- ```hasNext()``` Returns true if the cursor has documents and can be iterated.\n- ```max(expression)``` Specifies an exclusive upper index bound for a cursor\n- ```min(expression)``` Specifies an inclusive lower index bound for a cursor.\n- ```map(callback)``` Applies a function to each document in a cursor and collects the return values in an array.\n- ```forEach(callback)``` Applies a JavaScript function for every document in a cursor.\n\n### Mingo.Stream(query, [options]) - _NodeJS only_\nA Transform stream that can be piped from/to any readable/writable JSON stream.\n\n### Mingo.CollectionMixin\nA mixin object for ```Backbone.Collection``` which adds ```query()``` and ```aggregate()``` methods\n- ```query(criteria)``` Performs a query on the collection and returns a ```Mingo.Cursor``` object.\n- ```aggregate(expressions)``` Performs aggregation operation using the aggregation pipeline.\n\n### Mingo.find(collection, criteria, [projection])\nPerforms a query on a collection and returns a ```Mingo.Cursor``` object.\n\n### Mingo.remove(collection, criteria)\nReturns the non-matched objects as a collection from executing a ```Mingo.Query``` with the given criteria\n\n### Mingo.aggregate(collection, expressions)\nPerforms aggregation operation using the aggregation pipeline.\n\n## TODO\n - Geospatial Query Operators ($geoWithin, $geoIntersects, $near, $nearSphere)\n - Geometry Specifiers ($geometry, $maxDistance, $center, $centerSphere, $box, $polygon)\n\n## License\nMIT",
  "readmeFilename": "README.md",
  "_id": "mingo@0.3.2",
  "dist": {
    "shasum": "4161e7180f9adde17326c02560ad00b6340d696e"
  },
  "_from": "mingo@^0.3.1",
  "_resolved": "https://registry.npmjs.org/mingo/-/mingo-0.3.2.tgz"
}
